===============================
7. Integer validator module
===============================

Import module:
==============
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()


Function:
=========
Write a class BaseGeometry (based on 6-base_geometry.py).

    * You can assume name is always a string
    * If value is not an integer: raises a TypeError exception
    * If value is less or equal to 0: raises a ValueError exception


Section // No exceptions
=========================

Test case #0: A test case with good parameters
    
    >>> bg.integer_validator("my_int", 12)


Test case #1: A test case with good parameters

    >>> bg.integer_validator("width", 89)


Section // Type Errors
=========================

Test case #2: A test case with a not integer value

    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer


Section // Value Errors
=========================

Test case #14: A test case with zero as value

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

Test case #15: A test case with a value less than zero

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0


Section // General Errors
=========================

Test case #16: A test case with a not available method

    >>> try:
    ...     bg.area()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented
